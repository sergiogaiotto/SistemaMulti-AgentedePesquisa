#!/usr/bin/env python3
"""
Sistema Multi-Agente de Pesquisa Avan√ßada

Este sistema implementa uma arquitetura multi-agente usando LangGraph para 
coordenar pesquisas complexas com m√∫ltiplos agentes especializados.

Uso:
    python main.py
"""

import sys
import os
import time
from typing import Dict, Any

# Adiciona o diret√≥rio atual ao Python path
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from config import Config
from graph.research_workflow import research_workflow
from utils.helpers import (
    format_elapsed_time, 
    print_research_status, 
    generate_research_summary,
    save_research_to_file,
    ResearchTimer
)

def print_banner():
    """Imprime banner do sistema"""
    banner = """
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë                                                              ‚ïë
‚ïë        üî¨ Sistema Multi-Agente de Pesquisa Avan√ßada         ‚ïë
‚ïë                                                              ‚ïë
‚ïë   Arquitetura orquestrador-trabalhador com LangGraph        ‚ïë
‚ïë   ‚Ä¢ Lead Researcher (Coordenador)                           ‚ïë
‚ïë   ‚Ä¢ Search Subagents (Pesquisadores Especializados)         ‚ïë
‚ïë   ‚Ä¢ Citation Agent (Processador de Cita√ß√µes)                ‚ïë
‚ïë   ‚Ä¢ Memory System (Persist√™ncia de Contexto)                ‚ïë
‚ïë                                                              ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
    """
    print(banner)

def run_interactive_mode():
    """Executa o sistema em modo interativo"""
    
    print("\nüéØ Modo Interativo Iniciado")
    print("Digite 'quit', 'exit' ou 'sair' para encerrar\n")
    
    while True:
        try:
            # Solicita query do usu√°rio
            query = input("üìù Digite sua pesquisa: ").strip()
            
            # Verifica comandos de sa√≠da
            if query.lower() in ['quit', 'exit', 'sair', '']:
                print("\nüëã Encerrando sistema. At√© logo!")
                break
            
            # Executa pesquisa
            result = execute_research(query)
            
            # Mostra resultados
            display_results(result)
            
            # Pergunta se quer salvar
            save_prompt = input("\nüíæ Deseja salvar o relat√≥rio em arquivo? (s/N): ").strip().lower()
            if save_prompt in ['s', 'sim', 'y', 'yes']:
                filename = save_research_to_file(result)
                if filename:
                    print(f"‚úÖ Relat√≥rio salvo em: {filename}")
            
            print("\n" + "="*60 + "\n")
            
        except KeyboardInterrupt:
            print("\n\n‚ö†Ô∏è  Opera√ß√£o cancelada pelo usu√°rio")
            break
        except Exception as e:
            print(f"\n‚ùå Erro inesperado: {e}")
            print("Continuando...")

def execute_research(query: str) -> Dict[str, Any]:
    """Executa uma pesquisa completa"""
    
    timer = ResearchTimer()
    timer.mark_step("in√≠cio")
    
    print_research_status("üöÄ Iniciando pesquisa", f"Query: {query}")
    
    try:
        # Executa workflow de pesquisa
        timer.mark_step("execu√ß√£o_workflow")
        result = research_workflow.run_research(query)
        timer.mark_step("fim_workflow")
        
        # Adiciona informa√ß√µes de timing
        result["timing"] = {
            "total_duration": timer.get_total_elapsed(),
            "workflow_duration": timer.get_step_duration("fim_workflow", "execu√ß√£o_workflow")
        }
        
        if result.get("success"):
            print_research_status("‚úÖ Pesquisa conclu√≠da com sucesso!")
        else:
            print_research_status("‚ùå Pesquisa falhou", result.get("error", "Erro desconhecido"))
        
        # Imprime relat√≥rio de timing
        timer.print_timing_report()
        
        return result
        
    except Exception as e:
        print_research_status("‚ùå Erro durante execu√ß√£o", str(e))
        return {
            "success": False,
            "error": str(e),
            "query": query,
            "final_report": f"Erro na pesquisa: {e}",
            "sources": [],
            "subagent_results": [],
            "metadata": {}
        }

def display_results(result: Dict[str, Any]):
    """Exibe resultados da pesquisa"""
    
    print("\n" + "="*60)
    print("üìä RESULTADOS DA PESQUISA")
    print("="*60)
    
    # Resumo executivo
    summary = generate_research_summary(result)
    print(summary)
    
    if result.get("success"):
        # Relat√≥rio principal
        print("\nüìÑ RELAT√ìRIO COMPLETO")
        print("-"*40)
        report = result.get("final_report", "Relat√≥rio n√£o dispon√≠vel")
        print(report)
        
        # Estat√≠sticas
        metadata = result.get("metadata", {})
        timing = result.get("timing", {})
        
        print("\nüìà ESTAT√çSTICAS")
        print("-"*25)
        print(f"‚Ä¢ Subagentes executados: {metadata.get('num_subagents', 0)}")
        print(f"‚Ä¢ Fontes consultadas: {metadata.get('num_sources', 0)}")
        print(f"‚Ä¢ Itera√ß√µes realizadas: {metadata.get('iterations', 0)}")
        
        if timing.get("total_duration"):
            print(f"‚Ä¢ Tempo total: {format_elapsed_time(timing['total_duration'])}")
    
    print("="*60)

def run_demo_mode():
    """Executa demonstra√ß√£o com queries de exemplo"""
    
    demo_queries = [
        "What are all the companies in the United States working on AI agents in 2025? Make a list of at least 10 companies with name, website, product description, and industry.",
        "List the top 10 AI startups founded in 2024 with their funding information",
        "Find companies developing autonomous vehicles and their latest partnerships"
    ]
    
    print("\nüéÆ Modo Demonstra√ß√£o")
    print("Executando queries de exemplo...\n")
    
    for i, query in enumerate(demo_queries, 1):
        print(f"\n{'='*20} DEMO {i}/3 {'='*20}")
        print(f"Query: {query}")
        print("-"*60)
        
        result = execute_research(query)
        display_results(result)
        
        if i < len(demo_queries):
            input("\nPressione Enter para continuar...")

def main():
    """Fun√ß√£o principal"""
    
    try:
        # Validar configura√ß√µes
        Config.validate()
        
        # Mostrar banner
        print_banner()
        
        # Menu principal
        while True:
            print("\nüéØ MENU PRINCIPAL")
            print("-" * 30)
            print("1. üîç Modo Interativo")
            print("2. üéÆ Modo Demonstra√ß√£o")
            print("3. ‚öôÔ∏è  Testar Configura√ß√µes")
            print("4. üìñ Ajuda")
            print("5. üö™ Sair")
            
            choice = input("\nEscolha uma op√ß√£o (1-5): ").strip()
            
            if choice == "1":
                run_interactive_mode()
            elif choice == "2":
                run_demo_mode()
            elif choice == "3":
                test_configuration()
            elif choice == "4":
                show_help()
            elif choice == "5":
                print("\nüëã Obrigado por usar o Sistema Multi-Agente!")
                break
            else:
                print("\n‚ùå Op√ß√£o inv√°lida. Tente novamente.")
    
    except KeyboardInterrupt:
        print("\n\n‚ö†Ô∏è  Sistema encerrado pelo usu√°rio")
    except Exception as e:
        print(f"\n‚ùå Erro fatal: {e}")
        print("Verifique suas configura√ß√µes e tente novamente.")

def test_configuration():
    """Testa configura√ß√µes do sistema"""
    
    print("\nüîß Testando Configura√ß√µes...")
    print("-" * 40)
    
    # Testa OpenAI
    try:
        from langchain_openai import ChatOpenAI
        llm = ChatOpenAI(api_key=Config.OPENAI_API_KEY, model=Config.MODEL_NAME)
        response = llm.invoke("Test")
        print("‚úÖ OpenAI API: Funcionando")
    except Exception as e:
        print(f"‚ùå OpenAI API: Erro - {e}")
    
    # Testa Tavily (opcional)
    if Config.TAVILY_API_KEY:
        try:
            from langchain_community.tools.tavily_search import TavilySearchResults
            search = TavilySearchResults(max_results=1)
            search.run("test")
            print("‚úÖ Tavily API: Funcionando")
        except Exception as e:
            print(f"‚ùå Tavily API: Erro - {e}")
    else:
        print("‚ö†Ô∏è  Tavily API: N√£o configurada (usando DuckDuckGo)")
    
    # Testa importa√ß√µes
    try:
        from graph.research_workflow import research_workflow
        print("‚úÖ LangGraph: Funcionando")
    except Exception as e:
        print(f"‚ùå LangGraph: Erro - {e}")
    
    print("-" * 40)
    print("‚úÖ Teste de configura√ß√£o conclu√≠do!")

def show_help():
    """Mostra ajuda e documenta√ß√£o"""
    
    help_text = """
üìñ AJUDA - Sistema Multi-Agente de Pesquisa

üéØ COMO USAR:
‚Ä¢ Modo Interativo: Digite suas perguntas em linguagem natural
‚Ä¢ Modo Demo: Veja exemplos de pesquisas complexas

üí° TIPOS DE PESQUISA SUPORTADOS:
‚Ä¢ Pesquisa de empresas e startups
‚Ä¢ An√°lise de mercado e tend√™ncias
‚Ä¢ Informa√ß√µes t√©cnicas e cient√≠ficas
‚Ä¢ Relat√≥rios comparativos

üîß CONFIGURA√á√ÉO:
‚Ä¢ Edite o arquivo .env com suas chaves de API
‚Ä¢ OpenAI API √© obrigat√≥ria
‚Ä¢ Tavily API √© opcional (melhora qualidade)

üìù EXEMPLOS DE QUERIES:
‚Ä¢ "List top 10 AI companies in Silicon Valley"
‚Ä¢ "Find startups working on quantum computing"
‚Ä¢ "Compare electric vehicle manufacturers"

‚öôÔ∏è ARQUITETURA:
‚Ä¢ Lead Researcher: Coordena todo o processo
‚Ä¢ Search Subagents: Executam pesquisas especializadas
‚Ä¢ Citation Agent: Adiciona cita√ß√µes aos relat√≥rios
‚Ä¢ Memory System: Mant√©m contexto da pesquisa

üÜò SUPORTE:
‚Ä¢ Verifique configura√ß√µes em .env
‚Ä¢ Teste APIs no menu de configura√ß√µes
‚Ä¢ Consulte logs para detalhes de erros
    """
    
    print(help_text)

if __name__ == "__main__":
    main()